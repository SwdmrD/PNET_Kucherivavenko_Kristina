@page "/review/edit/{Id:int}"
@using BlazorApp.Models
@inject LibraryFacade Facade
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Редагувати відгук</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}

<EditForm Model="@review" OnValidSubmit="UpdateReview" FormName="editReviewForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label>Користувач</label>
        <InputSelect @bind-Value="review.UserId" class="form-select">
            <option value="">-- Виберіть користувача --</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.UserName</option>
            }
        </InputSelect>
        <ValidationMessage For="() => review.UserId" />
    </div>

    <div class="form-group mb-3">
        <label>Книга</label>
        <InputSelect @bind-Value="review.BookId" class="form-select">
            <option value="">-- Виберіть книгу --</option>
            @foreach (var book in books)
            {
                <option value="@book.Id">@book.Title</option>
            }
        </InputSelect>
        <ValidationMessage For="() => review.BookId" />
    </div>

    <div class="form-group mb-3">
        <label>Рейтинг</label>
        <InputSelect @bind-Value="review.Rating" class="form-select">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </InputSelect>
        <ValidationMessage For="() => review.Rating" />
    </div>

    <div class="form-group mb-3">
        <label>Дата створення</label>
        <InputDate @bind-Value="review.CreatedAt" class="form-control" />
        <ValidationMessage For="() => review.CreatedAt" />
    </div>

    <div class="form-group mb-3">
        <label>Текст відгуку</label>
        <InputTextArea @bind-Value="review.Text" class="form-control" rows="5" />
        <ValidationMessage For="() => review.Text" />
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" type="submit">Зберегти</button>
        <button class="btn btn-secondary ms-2" @onclick="GoBack">Скасувати</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Review review = new Review();
    private List<User> users = new List<User>();
    private List<Book> books = new List<Book>();
    private string? errorMessage;
    private int? originalUserId;
    private int? originalBookId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            review = await Facade.GetReviewById(Id) ?? new Review();
            users = await Facade.GetAllUsers() ?? new List<User>();
            books = await Facade.GetAllBooks() ?? new List<Book>();
            
            originalUserId = review.UserId;
            originalBookId = review.BookId;
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження даних: {ex.Message}";
        }
    }

    private async Task UpdateReview()
    {
        try
        {
            if (review.UserId == null || review.UserId == 0)
            {
                errorMessage = "Виберіть користувача";
                return;
            }
            
            if (review.BookId == null || review.BookId == 0)
            {
                errorMessage = "Виберіть книгу";
                return;
            }
            
            if (!review.IsCreatedAtValid())
            {
                errorMessage = "Відгук не може бути з майбутнього";
                return;
            }
            
            if (review.UserId != originalUserId || review.BookId != originalBookId)
            {
                var existingReview = await Facade.GetReviewByUserAndBook((int)review.UserId, (int)review.BookId);
                if (existingReview != null && existingReview.Id != Id)
                {
                    errorMessage = "Цей користувач вже залишив відгук для цієї книги.";
                    return;
                }
            }
            
            await Facade.UpdateReview(review);
            NavigationManager.NavigateTo("/reviews");
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка оновлення відгуку: {ex.Message}";
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/reviews");
    }
}