@page "/book/create"
@using BlazorApp.Models
@inject LibraryFacade Facade
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Додати книгу</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}

<EditForm Model="@newBook" OnValidSubmit="CreateNewBook" FormName="createBookForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="bookTitle">Назва</label>
        <InputText id="bookTitle" @bind-Value="newBook.Title" class="form-control" />
        <ValidationMessage For="() => newBook.Title" />
    </div>
    
    <div class="form-group">
        <label for="authorId">Автор</label>
        <InputSelect id="authorId" @bind-Value="newBook.AuthorId" class="form-control">
            <option value="0">-- Виберіть автора --</option>
            @foreach (var author in authors)
            {
                <option value="@author.Id">@($"{author.Name} {author.Surname}")</option>
            }
        </InputSelect>
        <ValidationMessage For="() => newBook.AuthorId" />
    </div>
    
    <div class="form-group">
        <label for="genreId">Жанр</label>
        <InputSelect id="genreId" @bind-Value="newBook.GenreId" class="form-control">
            <option value="0">-- Виберіть жанр --</option>
            @foreach (var genre in genres)
            {
                <option value="@genre.Id">@genre.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => newBook.GenreId" />
    </div>
    
    <button type="submit" class="btn btn-primary mt-3">Створити</button>
</EditForm>

@code {
    private Book newBook = new Book();
    private List<Author> authors = new List<Author>();
    private List<Genre> genres = new List<Genre>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authors = await Facade.GetAllAuthors() ?? new List<Author>();
            genres = await Facade.GetAllGenres() ?? new List<Genre>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження даних: {ex.Message}";
        }
    }

    private async Task CreateNewBook()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newBook.Title))
            {
                errorMessage = "Назва книги є обов'язковою";
                return;
            }
            
            if (newBook.AuthorId == 0)
            {
                errorMessage = "Виберіть автора";
                return;
            }
            
            if (newBook.GenreId == 0)
            {
                errorMessage = "Виберіть жанр";
                return;
            }
            
            var existingBook = await Facade.GetBookByTitle(newBook.Title);
            if (existingBook != null)
            {
                errorMessage = "Книга з такою назвою вже існує.";
                return;
            }
            
            await Facade.CreateBook(newBook);
            NavigationManager.NavigateTo("/books");
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка створення книги: {ex.Message}";
        }
    }
}